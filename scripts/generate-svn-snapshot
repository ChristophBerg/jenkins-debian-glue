#!/bin/bash

set -x
set -e
set -u

export LC_ALL=C
export LANG=C

if [ -r /etc/jenkins/debian_glue ] ; then
  . /etc/jenkins/debian_glue
fi

[ -n "${DEBEMAIL:-}" ] || DEBEMAIL="jenkins-debian-glue Autobuilder <jenkins@example.org>"
export DEBEMAIL

if [ ! -d source ] ; then
  echo "Please run the script in the jenkins workspace." >&2
  exit 1
fi

if [ -z "${BUILD_NUMBER:-}" ] ; then
  echo "No BUILD_NUMBER defined, please run it in jenkins." >&2
  exit 1
fi

if [ -z "${SVN_REVISION:-}" ] ; then
  echo "No SVN_REVISION defined, please run it with a subversion repository." >&2
  exit 1
fi

if ! [ -x "$(which svn2cl)" ] ; then
  echo "Error: svn2cl not available, please install subversion-tools." >&2
  exit 1
fi

if ! [ -x "$(which svn)" ] ; then
  echo "Error: svn not available, please install subversion." >&2
  exit 1
fi

if ! [ -x "$(which dpkg-parsechangelog)" ] ; then
  echo "Error: dpkg-parsechangelog not available, please install dpkg-dev." >&2
  exit 1
fi

JENKINS_DEBIAN_GLUE_VERSION=$(dpkg --list jenkins-debian-glue 2>/dev/null | awk '/^ii/ {print $3}')
if [ -n "${JENKINS_DEBIAN_GLUE_VERSION:-}" ] ; then
  echo "*** Running jenkins-debian-glue version $JENKINS_DEBIAN_GLUE_VERSION ***"
fi

echo "***  source package build phase ***"
rm -f ./* || true

ORIG_DIR=$(pwd)
cd source/${branch:-}

if ! [ -r debian/changelog ] ; then
  echo "Error: could not find debian/changelog (not a Debian package or wrong tag/branch?)" >&2
  exit 1
fi

SINCE_REVISION=$(svn info debian/changelog 2>/dev/null | awk '/Last Changed Rev:/ {print $4}')

if [ -z "${SINCE_REVISION:-}" ] ; then
  echo "Error: could not detect svn revision which modified debian/changelog." >&2
  exit 1
fi

# package name
PACKAGE=$(dpkg-parsechangelog --count 1 | awk '/^Source: / {print $2}')

# get newest version number from changelog
PREVIOUS_VERSION=$(dpkg-parsechangelog --count 1 | awk '/^Version: / {print $2}')

build_snapshot() {

  DISTRIBUTION=$(dpkg-parsechangelog --count 1 | awk '/^Distribution/ {print $2}')

  TIMESTAMP=$(date +%s) # seconds since 1970-01-01 00:00:00 UTC, ensuring version gets always newer...

  if [ "$DISTRIBUTION" = "UNRELEASED" ] ; then
    # we do NOT raise the version number, if we detect an unreleased version
    VERSION="${PREVIOUS_VERSION}~${TIMESTAMP}.svn${SVN_REVISION}.${BUILD_NUMBER}"
  else
    VERSION=$PREVIOUS_VERSION
  fi

  case $distribution in
    sid) SUFFIX="pgapt" ;;
    jessie) SUFFIX="pgapt80" ;;
    wheezy) SUFFIX="pgapt70" ;;
    squeeze) SUFFIX="pgapt60" ;;
    lenny) SUFFIX="pgapt50" ;;
    etch) SUFFIX="pgapt40" ;;
    *) echo "Unknown distribution $distribution" >&2 ; exit 1 ;;
  esac

  VERSION_STRING="$VERSION~$SUFFIX+1"

  dch --force-distribution --distribution="$distribution-pgapt" -b --newversion=$VERSION_STRING -- \
    "Rebuild for $distribution-pgapt ($BUILD_TAG)"
}

case "${branch:-}" in
  tags/*) echo "Building a tag version, not modifying the package" ;;
  *) build_snapshot;;
esac

cd $ORIG_DIR

debian_only="$(svn propget mergeWithUpstream source/${branch:-}/debian)"

#if [ "${debian_only:-}" = "1" ] ; then
#  (
#    cd "source/${branch:-}"
#    echo "mergeWithUpstream detected, using svn-buildpackage to create source package"
#    svn-buildpackage --svn-download-orig -S \
#     --svn-builder 'dpkg-buildpackage' -d \
#     --svn-move-to="${ORIG_DIR}" --svn-dont-purge -uc -us \
#     --svn-ignore-new -rfakeroot
#  )
#else
  ( cd source/${branch:-} && origtargz )
  dpkg-source --tar-ignore=\.svn -b source/${branch:-}
#fi

# revert to original debian/changelog to avoid highly increasing version numbers with each build
( cd source/${branch:-} ; svn revert debian/changelog )

# vim:foldmethod=marker ts=2 ft=sh ai expandtab sw=2
